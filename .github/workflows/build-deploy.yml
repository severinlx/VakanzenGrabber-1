# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Package

on: push
  #release:
    #types: [created]

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    
    ### BUILD

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn clean package spring-boot:repackage -DskipTests --file pom.xml
      
      ### DEPLOY

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vacation-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: java-task
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS Scheduled Tasks
      uses: airfordable/ecs-deploy-task-definition-to-scheduled-task@v2.0.0
      with:
        cluster: cluster-vacation
        task-definition: ${{ steps.task-def.outputs.task-definition }}

   # Previously task was deployed to the service.
   # But the service will mantain the task active forever.
   # We want the task to stop after the job is complete, in order to save resources. So we have scheduled the task for every 2 hours and deploying it to this scheduler.
   # The task will be stoped automaticaly, because we use System.exit() inside the SpringBoot Application, after the Data is saved in the Database.
   # This command stop the underlying Docker container and as the result the task that runs it

   # - name: Deploy Amazon ECS task definition
   #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
   #   with:
   #     task-definition: ${{ steps.task-def.outputs.task-definition }}
   #     service: vacation-backend
   #     cluster: cluster-vacation
   #     wait-for-service-stability: true

